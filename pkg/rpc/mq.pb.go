// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mq.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Topic struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	NodeGrp              string   `protobuf:"bytes,2,opt,name=node_grp,json=nodeGrp,proto3" json:"node_grp,omitempty"`
	MaxMsgBytes          uint32   `protobuf:"varint,3,opt,name=max_msg_bytes,json=maxMsgBytes,proto3" json:"max_msg_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_mq_65292b851c1c5107, []int{0}
}
func (m *Topic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topic.Unmarshal(m, b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
}
func (dst *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(dst, src)
}
func (m *Topic) XXX_Size() int {
	return xxx_messageInfo_Topic.Size(m)
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Topic) GetNodeGrp() string {
	if m != nil {
		return m.NodeGrp
	}
	return ""
}

func (m *Topic) GetMaxMsgBytes() uint32 {
	if m != nil {
		return m.MaxMsgBytes
	}
	return 0
}

type Subscriber struct {
	Topic                        string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Subscriber                   string   `protobuf:"bytes,2,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	LoadMsgBootId                uint32   `protobuf:"varint,3,opt,name=load_msg_boot_id,json=loadMsgBootId,proto3" json:"load_msg_boot_id,omitempty"`
	ConcurConsumeNum             uint32   `protobuf:"varint,4,opt,name=concur_consume_num,json=concurConsumeNum,proto3" json:"concur_consume_num,omitempty"`
	MaxConcurConsumeNumPerBucket uint32   `protobuf:"varint,5,opt,name=max_concur_consume_num_per_bucket,json=maxConcurConsumeNumPerBucket,proto3" json:"max_concur_consume_num_per_bucket,omitempty"`
	MsgWeight                    uint32   `protobuf:"varint,6,opt,name=msg_weight,json=msgWeight,proto3" json:"msg_weight,omitempty"`
	LoadMode                     uint32   `protobuf:"varint,7,opt,name=load_mode,json=loadMode,proto3" json:"load_mode,omitempty"`
	StartMsgId                   uint64   `protobuf:"varint,8,opt,name=start_msg_id,json=startMsgId,proto3" json:"start_msg_id,omitempty"`
	IsSerial                     bool     `protobuf:"varint,9,opt,name=is_serial,json=isSerial,proto3" json:"is_serial,omitempty"`
	Consumer                     string   `protobuf:"bytes,10,opt,name=consumer,proto3" json:"consumer,omitempty"`
	MaxConsumeMs                 uint32   `protobuf:"varint,11,opt,name=max_consume_ms,json=maxConsumeMs,proto3" json:"max_consume_ms,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *Subscriber) Reset()         { *m = Subscriber{} }
func (m *Subscriber) String() string { return proto.CompactTextString(m) }
func (*Subscriber) ProtoMessage()    {}
func (*Subscriber) Descriptor() ([]byte, []int) {
	return fileDescriptor_mq_65292b851c1c5107, []int{1}
}
func (m *Subscriber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscriber.Unmarshal(m, b)
}
func (m *Subscriber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscriber.Marshal(b, m, deterministic)
}
func (dst *Subscriber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscriber.Merge(dst, src)
}
func (m *Subscriber) XXX_Size() int {
	return xxx_messageInfo_Subscriber.Size(m)
}
func (m *Subscriber) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscriber.DiscardUnknown(m)
}

var xxx_messageInfo_Subscriber proto.InternalMessageInfo

func (m *Subscriber) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Subscriber) GetSubscriber() string {
	if m != nil {
		return m.Subscriber
	}
	return ""
}

func (m *Subscriber) GetLoadMsgBootId() uint32 {
	if m != nil {
		return m.LoadMsgBootId
	}
	return 0
}

func (m *Subscriber) GetConcurConsumeNum() uint32 {
	if m != nil {
		return m.ConcurConsumeNum
	}
	return 0
}

func (m *Subscriber) GetMaxConcurConsumeNumPerBucket() uint32 {
	if m != nil {
		return m.MaxConcurConsumeNumPerBucket
	}
	return 0
}

func (m *Subscriber) GetMsgWeight() uint32 {
	if m != nil {
		return m.MsgWeight
	}
	return 0
}

func (m *Subscriber) GetLoadMode() uint32 {
	if m != nil {
		return m.LoadMode
	}
	return 0
}

func (m *Subscriber) GetStartMsgId() uint64 {
	if m != nil {
		return m.StartMsgId
	}
	return 0
}

func (m *Subscriber) GetIsSerial() bool {
	if m != nil {
		return m.IsSerial
	}
	return false
}

func (m *Subscriber) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *Subscriber) GetMaxConsumeMs() uint32 {
	if m != nil {
		return m.MaxConsumeMs
	}
	return 0
}

type RegTopicReq struct {
	Topic                *Topic   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegTopicReq) Reset()         { *m = RegTopicReq{} }
func (m *RegTopicReq) String() string { return proto.CompactTextString(m) }
func (*RegTopicReq) ProtoMessage()    {}
func (*RegTopicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_mq_65292b851c1c5107, []int{2}
}
func (m *RegTopicReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegTopicReq.Unmarshal(m, b)
}
func (m *RegTopicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegTopicReq.Marshal(b, m, deterministic)
}
func (dst *RegTopicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegTopicReq.Merge(dst, src)
}
func (m *RegTopicReq) XXX_Size() int {
	return xxx_messageInfo_RegTopicReq.Size(m)
}
func (m *RegTopicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegTopicReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegTopicReq proto.InternalMessageInfo

func (m *RegTopicReq) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

type RegTopicResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegTopicResp) Reset()         { *m = RegTopicResp{} }
func (m *RegTopicResp) String() string { return proto.CompactTextString(m) }
func (*RegTopicResp) ProtoMessage()    {}
func (*RegTopicResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_mq_65292b851c1c5107, []int{3}
}
func (m *RegTopicResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegTopicResp.Unmarshal(m, b)
}
func (m *RegTopicResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegTopicResp.Marshal(b, m, deterministic)
}
func (dst *RegTopicResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegTopicResp.Merge(dst, src)
}
func (m *RegTopicResp) XXX_Size() int {
	return xxx_messageInfo_RegTopicResp.Size(m)
}
func (m *RegTopicResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RegTopicResp.DiscardUnknown(m)
}

var xxx_messageInfo_RegTopicResp proto.InternalMessageInfo

type RegSubscriberReq struct {
	Subscriber           *Subscriber `protobuf:"bytes,1,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RegSubscriberReq) Reset()         { *m = RegSubscriberReq{} }
func (m *RegSubscriberReq) String() string { return proto.CompactTextString(m) }
func (*RegSubscriberReq) ProtoMessage()    {}
func (*RegSubscriberReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_mq_65292b851c1c5107, []int{4}
}
func (m *RegSubscriberReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegSubscriberReq.Unmarshal(m, b)
}
func (m *RegSubscriberReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegSubscriberReq.Marshal(b, m, deterministic)
}
func (dst *RegSubscriberReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegSubscriberReq.Merge(dst, src)
}
func (m *RegSubscriberReq) XXX_Size() int {
	return xxx_messageInfo_RegSubscriberReq.Size(m)
}
func (m *RegSubscriberReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegSubscriberReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegSubscriberReq proto.InternalMessageInfo

func (m *RegSubscriberReq) GetSubscriber() *Subscriber {
	if m != nil {
		return m.Subscriber
	}
	return nil
}

type RegSubscriberResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegSubscriberResp) Reset()         { *m = RegSubscriberResp{} }
func (m *RegSubscriberResp) String() string { return proto.CompactTextString(m) }
func (*RegSubscriberResp) ProtoMessage()    {}
func (*RegSubscriberResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_mq_65292b851c1c5107, []int{5}
}
func (m *RegSubscriberResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegSubscriberResp.Unmarshal(m, b)
}
func (m *RegSubscriberResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegSubscriberResp.Marshal(b, m, deterministic)
}
func (dst *RegSubscriberResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegSubscriberResp.Merge(dst, src)
}
func (m *RegSubscriberResp) XXX_Size() int {
	return xxx_messageInfo_RegSubscriberResp.Size(m)
}
func (m *RegSubscriberResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RegSubscriberResp.DiscardUnknown(m)
}

var xxx_messageInfo_RegSubscriberResp proto.InternalMessageInfo

type GetTopicReq struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTopicReq) Reset()         { *m = GetTopicReq{} }
func (m *GetTopicReq) String() string { return proto.CompactTextString(m) }
func (*GetTopicReq) ProtoMessage()    {}
func (*GetTopicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_mq_65292b851c1c5107, []int{6}
}
func (m *GetTopicReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTopicReq.Unmarshal(m, b)
}
func (m *GetTopicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTopicReq.Marshal(b, m, deterministic)
}
func (dst *GetTopicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicReq.Merge(dst, src)
}
func (m *GetTopicReq) XXX_Size() int {
	return xxx_messageInfo_GetTopicReq.Size(m)
}
func (m *GetTopicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicReq proto.InternalMessageInfo

func (m *GetTopicReq) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func init() {
	proto.RegisterType((*Topic)(nil), "rpc.Topic")
	proto.RegisterType((*Subscriber)(nil), "rpc.Subscriber")
	proto.RegisterType((*RegTopicReq)(nil), "rpc.RegTopicReq")
	proto.RegisterType((*RegTopicResp)(nil), "rpc.RegTopicResp")
	proto.RegisterType((*RegSubscriberReq)(nil), "rpc.RegSubscriberReq")
	proto.RegisterType((*RegSubscriberResp)(nil), "rpc.RegSubscriberResp")
	proto.RegisterType((*GetTopicReq)(nil), "rpc.GetTopicReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BucketMqClient is the client API for BucketMq service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BucketMqClient interface {
	RegTopic(ctx context.Context, in *RegTopicReq, opts ...grpc.CallOption) (*RegTopicResp, error)
	RegSubscriber(ctx context.Context, in *RegSubscriberReq, opts ...grpc.CallOption) (*RegSubscriberResp, error)
}

type bucketMqClient struct {
	cc *grpc.ClientConn
}

func NewBucketMqClient(cc *grpc.ClientConn) BucketMqClient {
	return &bucketMqClient{cc}
}

func (c *bucketMqClient) RegTopic(ctx context.Context, in *RegTopicReq, opts ...grpc.CallOption) (*RegTopicResp, error) {
	out := new(RegTopicResp)
	err := c.cc.Invoke(ctx, "/rpc.BucketMq/RegTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketMqClient) RegSubscriber(ctx context.Context, in *RegSubscriberReq, opts ...grpc.CallOption) (*RegSubscriberResp, error) {
	out := new(RegSubscriberResp)
	err := c.cc.Invoke(ctx, "/rpc.BucketMq/RegSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketMqServer is the server API for BucketMq service.
type BucketMqServer interface {
	RegTopic(context.Context, *RegTopicReq) (*RegTopicResp, error)
	RegSubscriber(context.Context, *RegSubscriberReq) (*RegSubscriberResp, error)
}

func RegisterBucketMqServer(s *grpc.Server, srv BucketMqServer) {
	s.RegisterService(&_BucketMq_serviceDesc, srv)
}

func _BucketMq_RegTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegTopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketMqServer).RegTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BucketMq/RegTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketMqServer).RegTopic(ctx, req.(*RegTopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketMq_RegSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegSubscriberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketMqServer).RegSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BucketMq/RegSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketMqServer).RegSubscriber(ctx, req.(*RegSubscriberReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BucketMq_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.BucketMq",
	HandlerType: (*BucketMqServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegTopic",
			Handler:    _BucketMq_RegTopic_Handler,
		},
		{
			MethodName: "RegSubscriber",
			Handler:    _BucketMq_RegSubscriber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mq.proto",
}

func init() { proto.RegisterFile("mq.proto", fileDescriptor_mq_65292b851c1c5107) }

var fileDescriptor_mq_65292b851c1c5107 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0xb4, 0x69, 0x9d, 0x71, 0x52, 0xd2, 0xe1, 0x43, 0x4b, 0xf8, 0x90, 0x31, 0x48, 0xe4,
	0x80, 0x52, 0x51, 0xfe, 0x00, 0x6a, 0x0e, 0x51, 0x0f, 0x41, 0xc8, 0x45, 0xe2, 0x82, 0x64, 0xf9,
	0x63, 0x65, 0x2c, 0xba, 0xd9, 0xcd, 0xee, 0x5a, 0x84, 0x13, 0x3f, 0x85, 0xbf, 0x8a, 0x76, 0x36,
	0x4d, 0x9d, 0x50, 0x6e, 0x99, 0x37, 0xf3, 0xe6, 0xbd, 0x97, 0x59, 0x43, 0x28, 0x56, 0x53, 0xa5,
	0xa5, 0x95, 0x78, 0xa0, 0x55, 0x99, 0x7c, 0x83, 0xde, 0x17, 0xa9, 0x9a, 0x12, 0x1f, 0x41, 0xcf,
	0xba, 0x1f, 0x2c, 0x88, 0x83, 0x49, 0x3f, 0xf5, 0x05, 0x3e, 0x85, 0x70, 0x29, 0x2b, 0x9e, 0xd5,
	0x5a, 0xb1, 0xfb, 0xd4, 0x38, 0x76, 0xf5, 0x5c, 0x2b, 0x4c, 0x60, 0x28, 0xf2, 0x75, 0x26, 0x4c,
	0x9d, 0x15, 0xbf, 0x2c, 0x37, 0xec, 0x20, 0x0e, 0x26, 0xc3, 0x34, 0x12, 0xf9, 0x7a, 0x61, 0xea,
	0x0b, 0x07, 0x25, 0x7f, 0x0e, 0x00, 0xae, 0xda, 0xc2, 0x94, 0xba, 0x29, 0xb8, 0xfe, 0x8f, 0xc6,
	0x4b, 0x00, 0xb3, 0x9d, 0xd9, 0xa8, 0x74, 0x10, 0x7c, 0x0b, 0xa3, 0x6b, 0x99, 0x57, 0x5e, 0x49,
	0x4a, 0x9b, 0x35, 0xd5, 0x46, 0x6b, 0xe8, 0x70, 0x27, 0x26, 0xa5, 0xbd, 0xac, 0xf0, 0x1d, 0x60,
	0x29, 0x97, 0x65, 0xab, 0xb3, 0x52, 0x2e, 0x4d, 0x2b, 0x78, 0xb6, 0x6c, 0x05, 0x3b, 0xa4, 0xd1,
	0x91, 0xef, 0xcc, 0x7c, 0xe3, 0x53, 0x2b, 0x70, 0x0e, 0xaf, 0x9c, 0xff, 0x7f, 0x19, 0x99, 0xe2,
	0x3a, 0x2b, 0xda, 0xf2, 0x07, 0xb7, 0xac, 0x47, 0xe4, 0xe7, 0x22, 0x5f, 0xcf, 0xf6, 0xf8, 0x9f,
	0xb9, 0xbe, 0xa0, 0x19, 0x7c, 0x01, 0xe0, 0xac, 0xfd, 0xe4, 0x4d, 0xfd, 0xdd, 0xb2, 0x23, 0x62,
	0xf4, 0x85, 0xa9, 0xbf, 0x12, 0x80, 0xcf, 0xa0, 0xef, 0xed, 0xcb, 0x8a, 0xb3, 0x63, 0xea, 0x86,
	0xe4, 0x5b, 0x56, 0x1c, 0x63, 0x18, 0x18, 0x9b, 0x6b, 0x4b, 0xe1, 0x9a, 0x8a, 0x85, 0x71, 0x30,
	0x39, 0x4c, 0x81, 0xb0, 0x85, 0xa9, 0x2f, 0x2b, 0x47, 0x6f, 0x4c, 0x66, 0xb8, 0x6e, 0xf2, 0x6b,
	0xd6, 0x8f, 0x83, 0x49, 0x98, 0x86, 0x8d, 0xb9, 0xa2, 0x1a, 0xc7, 0x10, 0x6e, 0x8c, 0x6b, 0x06,
	0xf4, 0xc7, 0x6d, 0x6b, 0x7c, 0x03, 0x27, 0x9b, 0x7c, 0x14, 0x4c, 0x18, 0x16, 0x91, 0xf8, 0xc0,
	0x87, 0x71, 0xe0, 0xc2, 0x24, 0x67, 0x10, 0xa5, 0xbc, 0xa6, 0x27, 0x90, 0xf2, 0x15, 0xc6, 0xdd,
	0x0b, 0x45, 0xe7, 0x30, 0xd5, 0xaa, 0x9c, 0xfa, 0xae, 0x6f, 0x24, 0x27, 0x30, 0xb8, 0x25, 0x18,
	0x95, 0xcc, 0x60, 0x94, 0xf2, 0xfa, 0xf6, 0xc8, 0x6e, 0xcb, 0xd9, 0xce, 0x45, 0xfd, 0xaa, 0x07,
	0xb4, 0xaa, 0x33, 0xd7, 0x19, 0x49, 0x1e, 0xc2, 0xe9, 0xde, 0x12, 0xa3, 0x92, 0xd7, 0x10, 0xcd,
	0xb9, 0xdd, 0x5a, 0xbb, 0xf3, 0xf1, 0x9c, 0xff, 0x86, 0xd0, 0x9f, 0x61, 0xb1, 0xc2, 0xf7, 0x10,
	0xde, 0x58, 0xc3, 0x11, 0xc9, 0x75, 0xa2, 0x8d, 0x4f, 0xf7, 0x10, 0xa3, 0x92, 0x7b, 0xf8, 0x11,
	0x86, 0x3b, 0xc2, 0xf8, 0xf8, 0x66, 0x6a, 0x27, 0xd1, 0xf8, 0xc9, 0x5d, 0xb0, 0xdb, 0x50, 0x1c,
	0xd1, 0xc7, 0xf4, 0xe1, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x57, 0x4d, 0xaa, 0x40, 0x58, 0x03,
	0x00, 0x00,
}
