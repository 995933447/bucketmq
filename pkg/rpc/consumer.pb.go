// Code generated by protoc-gen-go. DO NOT EDIT.
// source: consumer.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConsumeReq struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Subscriber           string   `protobuf:"bytes,2,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RetriedCnt           uint32   `protobuf:"varint,4,opt,name=retried_cnt,json=retriedCnt,proto3" json:"retried_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumeReq) Reset()         { *m = ConsumeReq{} }
func (m *ConsumeReq) String() string { return proto.CompactTextString(m) }
func (*ConsumeReq) ProtoMessage()    {}
func (*ConsumeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_consumer_bcbe0d13fb22c11e, []int{0}
}
func (m *ConsumeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeReq.Unmarshal(m, b)
}
func (m *ConsumeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeReq.Marshal(b, m, deterministic)
}
func (dst *ConsumeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeReq.Merge(dst, src)
}
func (m *ConsumeReq) XXX_Size() int {
	return xxx_messageInfo_ConsumeReq.Size(m)
}
func (m *ConsumeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeReq proto.InternalMessageInfo

func (m *ConsumeReq) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ConsumeReq) GetSubscriber() string {
	if m != nil {
		return m.Subscriber
	}
	return ""
}

func (m *ConsumeReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ConsumeReq) GetRetriedCnt() uint32 {
	if m != nil {
		return m.RetriedCnt
	}
	return 0
}

type ConsumeResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumeResp) Reset()         { *m = ConsumeResp{} }
func (m *ConsumeResp) String() string { return proto.CompactTextString(m) }
func (*ConsumeResp) ProtoMessage()    {}
func (*ConsumeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_consumer_bcbe0d13fb22c11e, []int{1}
}
func (m *ConsumeResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeResp.Unmarshal(m, b)
}
func (m *ConsumeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeResp.Marshal(b, m, deterministic)
}
func (dst *ConsumeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeResp.Merge(dst, src)
}
func (m *ConsumeResp) XXX_Size() int {
	return xxx_messageInfo_ConsumeResp.Size(m)
}
func (m *ConsumeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeResp.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeResp proto.InternalMessageInfo

type PingReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReq) Reset()         { *m = PingReq{} }
func (m *PingReq) String() string { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()    {}
func (*PingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_consumer_bcbe0d13fb22c11e, []int{2}
}
func (m *PingReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingReq.Unmarshal(m, b)
}
func (m *PingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingReq.Marshal(b, m, deterministic)
}
func (dst *PingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReq.Merge(dst, src)
}
func (m *PingReq) XXX_Size() int {
	return xxx_messageInfo_PingReq.Size(m)
}
func (m *PingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReq.DiscardUnknown(m)
}

var xxx_messageInfo_PingReq proto.InternalMessageInfo

type PingResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResp) Reset()         { *m = PingResp{} }
func (m *PingResp) String() string { return proto.CompactTextString(m) }
func (*PingResp) ProtoMessage()    {}
func (*PingResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_consumer_bcbe0d13fb22c11e, []int{3}
}
func (m *PingResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResp.Unmarshal(m, b)
}
func (m *PingResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResp.Marshal(b, m, deterministic)
}
func (dst *PingResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResp.Merge(dst, src)
}
func (m *PingResp) XXX_Size() int {
	return xxx_messageInfo_PingResp.Size(m)
}
func (m *PingResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResp.DiscardUnknown(m)
}

var xxx_messageInfo_PingResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ConsumeReq)(nil), "rpc.ConsumeReq")
	proto.RegisterType((*ConsumeResp)(nil), "rpc.ConsumeResp")
	proto.RegisterType((*PingReq)(nil), "rpc.PingReq")
	proto.RegisterType((*PingResp)(nil), "rpc.PingResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConsumerClient is the client API for Consumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsumerClient interface {
	Consume(ctx context.Context, in *ConsumeReq, opts ...grpc.CallOption) (*ConsumeResp, error)
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
}

type consumerClient struct {
	cc *grpc.ClientConn
}

func NewConsumerClient(cc *grpc.ClientConn) ConsumerClient {
	return &consumerClient{cc}
}

func (c *consumerClient) Consume(ctx context.Context, in *ConsumeReq, opts ...grpc.CallOption) (*ConsumeResp, error) {
	out := new(ConsumeResp)
	err := c.cc.Invoke(ctx, "/rpc.Consumer/Consume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/rpc.Consumer/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerServer is the server API for Consumer service.
type ConsumerServer interface {
	Consume(context.Context, *ConsumeReq) (*ConsumeResp, error)
	Ping(context.Context, *PingReq) (*PingResp, error)
}

func RegisterConsumerServer(s *grpc.Server, srv ConsumerServer) {
	s.RegisterService(&_Consumer_serviceDesc, srv)
}

func _Consumer_Consume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).Consume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Consumer/Consume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).Consume(ctx, req.(*ConsumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Consumer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Consumer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Consumer",
	HandlerType: (*ConsumerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Consume",
			Handler:    _Consumer_Consume_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Consumer_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consumer.proto",
}

func init() { proto.RegisterFile("consumer.proto", fileDescriptor_consumer_bcbe0d13fb22c11e) }

var fileDescriptor_consumer_bcbe0d13fb22c11e = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x18, 0x84, 0x5d, 0xbb, 0xda, 0x76, 0xda, 0x55, 0xf9, 0xf1, 0x10, 0x7a, 0xd0, 0x25, 0x20, 0xec,
	0x29, 0x07, 0x7d, 0x84, 0xbe, 0x80, 0xe4, 0x05, 0x64, 0x37, 0x0d, 0x92, 0x83, 0x49, 0xfa, 0x27,
	0xc5, 0xd7, 0x97, 0x66, 0x83, 0xd6, 0xdb, 0xcc, 0x37, 0xc3, 0x24, 0xfc, 0xb8, 0x33, 0xc1, 0xa7,
	0xd3, 0x97, 0x65, 0x15, 0x39, 0xe4, 0x40, 0x0b, 0x8e, 0x46, 0x7e, 0x03, 0xfb, 0x19, 0x6b, 0x7b,
	0xa4, 0x47, 0xdc, 0xe4, 0x10, 0x9d, 0x11, 0x4d, 0xdf, 0x0c, 0x6b, 0x3d, 0x1b, 0x7a, 0x02, 0xd2,
	0x69, 0x4a, 0x86, 0xdd, 0x64, 0x59, 0x5c, 0x97, 0xe8, 0x82, 0x10, 0xa1, 0x3d, 0x8c, 0x79, 0x14,
	0x8b, 0xbe, 0x19, 0xb6, 0xba, 0x68, 0x7a, 0xc6, 0x86, 0x6d, 0x66, 0x67, 0x0f, 0x1f, 0xc6, 0x67,
	0xd1, 0xf6, 0xcd, 0xd0, 0x69, 0x54, 0xb4, 0xf7, 0x59, 0x76, 0xd8, 0xfc, 0x3e, 0x9c, 0xa2, 0x5c,
	0x63, 0xf9, 0xee, 0xfc, 0xa7, 0xb6, 0x47, 0x09, 0xac, 0x66, 0x99, 0xe2, 0xeb, 0x88, 0x55, 0x6d,
	0x31, 0x29, 0x2c, 0xab, 0xa6, 0x7b, 0xc5, 0xd1, 0xa8, 0xbf, 0x8f, 0xef, 0x1e, 0xfe, 0x83, 0x14,
	0xe5, 0x15, 0xbd, 0xa0, 0x3d, 0xef, 0xd0, 0xb6, 0x64, 0x75, 0x7d, 0xd7, 0x5d, 0xb8, 0x73, 0x6d,
	0xba, 0x2d, 0xd7, 0x78, 0xfb, 0x09, 0x00, 0x00, 0xff, 0xff, 0x07, 0xd0, 0xfd, 0xc1, 0x1f, 0x01,
	0x00, 0x00,
}
